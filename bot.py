from typing import Any

import telebot
from telebot import types
import time
import sqlite3

import sys

# insert at 1, 0 is the script path (or '' in REPL)
sys.path.insert(1, r"C:\Users\–°–ª–∞–≤–∞\test1_bot_python\DB")
sys.path.insert(1, r"C:\Users\–°–ª–∞–≤–∞\test1_bot_python")
from SQLDateBase import SQLighter
import TOKEN

bot = telebot.TeleBot(TOKEN.Token)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
db = SQLighter(TOKEN.DB)


# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start'])
def start(message):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not bool(len(db.subscriber_exists(message.from_user.id))):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, ' + str(message.from_user.first_name) + '!')
        db.add_subscriber(message.from_user.id, username=message.from_user.username,
                          first_name=message.from_user.first_name, last_name=message.from_user.last_name)

    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
                                      "/network - —Å–≤—è–∑—å —Å –Ω–∞–º–∏\n"
                                      "/help - –°–ø—Ä–∞–≤–∫–∞\n"
                                      "/sub - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                                      "/unsub - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
                                      "/delete_user - –£–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"""
                                      "/getsub - –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
                                      "/getuser - –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"""
                                      "/referral - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
                                      "/Hello\n"""
                                      "/list_users - –í—Å–µ –∫—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º")


# help - —Å–ø—Ä–∞–≤–∫–∞
@bot.message_handler(commands=['help'])
def help(message):
    help_me = types.InlineKeyboardMarkup()
    help_Button = types.InlineKeyboardButton(text="–í–æ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–≤—è–∑—å —Å –Ω–∏–º:", callback_data='info_about_me')
    help_me.add(help_Button)
    bot.send_message(message.chat.id, "–Ø –ø–æ–º–æ—á—å –Ω–∏—á–µ–º –Ω–µ –º–æ–≥—É(\n"
                                      "–£–∂ —Ç–∞–∫ –º–µ–Ω—è –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —É –Ω–µ–≥–æ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ",
                     reply_markup=help_me)


# network - —Ç–∞–±–ª–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–Ω—ã—Ö –ª—é–¥—è—Ö
@bot.message_handler(commands=['network'])
def network(message):
    markup = types.InlineKeyboardMarkup()
    item = [
        types.InlineKeyboardButton("–°–æ—Ñ–∞", callback_data='test'),
        types.InlineKeyboardButton("–°–ª–∞–≤–∞", callback_data='info_about_me'),
        types.InlineKeyboardButton("üçë–∂–æ–ø–∞", url="https://vk.com/ivanyshka4"),
        types.InlineKeyboardButton("ü§û", url="https://vk.com/russellmoore"),
        types.InlineKeyboardButton("ü§ôüèΩ", url="https://vk.com/yumaguzhin_ddd"),
        types.InlineKeyboardButton("ü§ò", url="https://vk.com/vovanchoyt")
    ]
    markup.add(*item)
    bot.send_message(message.chat.id, "–õ—É—á—à–µ –Ω–µ —Å–≤—è–∑—ã–≤–∞–π—Å—è —Å –Ω–∞–º–∏üòà", reply_markup=markup)


# callbacki –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    # –∏–Ω—Ñ–æ –æ –°–æ—Ñ
    if call.message:
        if call.data == 'test':
            a = types.InlineKeyboardMarkup()
            b = types.InlineKeyboardButton(text="‚èÆ–ù–∞–∑–∞–¥", callback_data="cancel")
            a.add(b)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", reply_markup=a)
            # –∏–Ω—Ñ–æ –æ–±–æ –º–Ω–µ
        elif call.data == 'info_about_me':
            info_me_markup = types.InlineKeyboardMarkup()
            item_info_about_me = [
                types.InlineKeyboardButton(text="VK", url='https://vk.com/mrgferintin'),
                types.InlineKeyboardButton(text="t.me", url='https://t.me/GFE_rin'),
                types.InlineKeyboardButton(text="WhatsApp", url='https://wa.me/+79049473690'),
                types.InlineKeyboardButton(text="‚èÆ–ù–∞–∑–∞–¥", callback_data="cancel")
            ]
            info_me_markup.add(*item_info_about_me)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–°–≤—è–∑—å —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º\n""–õ—É—á—à–µ –Ω–µ —Å–≤—è–∑—ã–≤–∞–π—Å—è —Å –Ω–∏–º.", reply_markup=info_me_markup)
            # –ù–ê–ó–ê–î –≤ –º–µ–Ω—é —Å—Ç–∞—Ä—Ç
        elif call.data == 'cancel':
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            return network(call.message)


# /sub - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
@bot.message_handler(commands=['sub'])
def subscribe(message: types.Message):
    # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    db.update_subscription(message.from_user.id, True)
    bot.send_message(message.chat.id,
                     "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!\n–ñ–¥–∏—Ç–µ, —Å–∫–æ—Ä–æ –≤—ã–π–¥—É—Ç –Ω–æ–≤—ã–µ –æ–±–∑–æ—Ä—ã –∏ –≤—ã —É–∑–Ω–∞–µ—Ç–µ –æ –Ω–∏—Ö –ø–µ—Ä–≤—ã–º–∏ =)")


# /unsub - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è
@bot.message_handler(commands=['unsub'])
def unsubscribe(message: types.Message):
    if not bool(len(db.subscriber_exists(message.from_user.id))):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–∑–∞–ø–æ–º–∏–Ω–∞–µ–º)
        db.add_subscriber(message.from_user.id, False)
        bot.send_message(message.chat.id, "–í—ã –∏—Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        db.update_subscription(message.from_user.id, False)
        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")


# /getsub - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
@bot.message_handler(commands=['getsub'])
def getsub(message: types.Message):
    bot.send_message(message.chat.id, " \n".join(map(str, db.get_subscriptions())))


# /getuser - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
@bot.message_handler(commands=['getuser'])
def getsub(message: types.Message):
    i = 0
    try:
        while 1:
            if bool(db.get_user()[i][5]):
                bot.send_message(message.chat.id, str(i+1) + ". " + "".join(map(str, db.get_user()[i][4])) + ' ' + "".join(map(str, db.get_user()[i][5])))
            else:
                bot.send_message(message.chat.id, str(i+1) + ". " + "".join(map(str, db.get_user()[i][4])))
            i += 1
    except Exception as e:
        print(e)
    finally:
        if i:
            bot.send_message(message.chat.id, "–í—Å–µ –∫—Ç–æ –±—ã–ª –∑–¥–µ—Å—å)")
        else:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ª–∏–±–æ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞")


# /delete_user
@bot.message_handler(commands=['delete_user'])
def delete_user(message: types.Message):
    if bool(len(db.subscriber_exists(message.from_user.id))):
        db.delete_subscription(message.from_user.id)
        db.commit_subscription()
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


# /referral
@bot.message_handler(commands=['referral'])
def referral(message):
    if not int(db.subscriber_exists(message.from_user.id)[0][6]):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥—Ä—É–≥–∞, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 6:\n")
        bot.register_next_step_handler(msg, start_2)
    else:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥")
        bot.send_message(message.chat.id, "–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ - " + str(db.subscriber_exists(message.from_user.id)[0][0]))


def start_2(message):
    if bool(len(db.subscriber_exists_id(message.text))):
        db.referral_code_1(message.text, message.from_user.id)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        db.referral_code_2(message.text)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        db.commit_subscription()
        bot.send_message(message.chat.id, '–í–∞—à –¥—Ä—É–≥ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω: \n' + " ".join(
            map(str, db.subscriber_exists_id(message.text))) + "\n –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


# /–í—ã–≤–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@bot.message_handler(commands=['list_users'])
def getsub(message: types.Message):
    i = 0
    listUsers = types.InlineKeyboardMarkup()
    try:
        while 1:
            listUsers.add(types.InlineKeyboardButton(text=str("".join(map(str, db.get_user()[i][4]))), url=str('https://t.me/' + "".join(map(str, db.get_user()[i][3])))))
            # bot.send_message(message.chat.id, '@' + "".join(map(str, db.get_user()[i][3])))
            i+=1
    except Exception as e:
        print(e)
    finally:
        # bot.send_message(message.chat.id, "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        bot.send_message(message.chat.id, "–°—Å—ã–ª–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", reply_markup=listUsers)


# echo bot
@bot.message_handler(content_types=["text"])
def handle_text(message):
    bot.send_message(message.chat.id, '–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: ' + message.text + '. –Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –º–Ω–µ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å')


# –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
# def clear(self, update, context):
#     new_message_id = message.message_id
#     while new_message_id > 1:
#         try:
#             context.bot.delete_message(chat_id=message.chat_id, message_id=new_message_id)
#         except Exception as error:
#             print(f'Message_id does not exist: {new_message_id} - {error}')
#         new_message_id = new_message_id - 1

if __name__ == '__main__':  # —á—Ç–æ–±—ã –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤ –≤–∏–¥–µ —Å—Ü–µ–Ω–∞—Ä–∏—è, –∞ –Ω–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
    try:
        bot.polling(none_stop=True)  # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    except Exception as ex:
        print(ex)  # –∏–ª–∏ import traceback; traceback.print_exc() –¥–ª—è –ø–µ—á–∞—Ç–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        # time.sleep(15)
